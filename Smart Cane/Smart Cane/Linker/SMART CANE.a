;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.6
;Automatic Program Generator
;© Copyright 1998-2012 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :   SMART CANE
;Version :  2
;Date    : 5/7/2017
;Author  : NGUYEN THI HONG PHUC (Evaluation)V1.0 - SonSivRi.to
;Company :   BME_IU
;Comments:   MICRO PROJECT
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <math.h>
;#include <delay.h>
;
;#define  TRIGGER                   PORTD.5
;#define  ECHO_SRF05                PIND.2
;#define  DATA_REGISTER_EMPTY       (1<<UDRE)
;#define     powf   pow
;#define  ADC_VREF_TYPE              0x00
;
;// define Ultrasound sensor
;unsigned int timer1_value;
;unsigned int i;
;unsigned int sum_1=0,sum_2=0;
;unsigned int distance[30];
;unsigned int distance_1;
;unsigned int distance_2;
;unsigned long int value;
;float  volts;
;
;//define ADC for IR
;unsigned char High_byte, Low_byte;
;unsigned char USART_packet[4]={0};
;unsigned char ADC[30]={0};
;volatile unsigned char Byte_flag=0;
;unsigned int ADC_read(unsigned char ADC_CHANNEL);
;
;//define cho usart
;void UART_putChar(char c );
;void USART_init(void);
;void UART_Printf(char *s);
;void System_init(void);
;//void Speak(void);    CHUA SU DUNG
;
;//LCD DEFINE
;
;//Declare LCD
;#define   LCD_RS  PORTB.0
;#define   LCD_RW  PORTB.1 //PORTA1
;#define   LCD_E   PORTB.2 //PORTA2   // enable LCD
;
;#define   LCD_B4  PORTB.4 //PORTA4
;#define   LCD_B5  PORTB.5 //PORTA5
;#define   LCD_B6  PORTB.6 //PORTA6
;#define   LCD_B7  PORTB.7 //PORTA7
;
;#define   LCD_data_out(data) (PORTB = (PORTB&0x0F)|((data<<4)&0xF0))
;
;#define   MODE_4_BIT     0x28
;#define   CLR_SCR        0x01
;#define   DISP_ON        0x0C
;#define   CURSOR_ON      0x0E
;#define   CURSOR_HOME    0x80
;#define   CURSOR_LINE1   0x80
;#define   CURSOR_LINE2   0xC0
;
;
;//hien thi len LCD
;void LCD_Write_Nibble(char byte);
;void LCD_Wait_Busy();
;void LCD_Write_Cmd(char cmd);
;void LCD_Write_Data(char chr);
;void LCD_Putc(char c);
;void LCD_GotoXY(unsigned char x, unsigned char y);
;void LCD_Init();
;void LCD_Write_Int(unsigned int integer );
;void LCD_Printf(char *str);
;void USART_1(void);
;void USART_2(void);
;
;
;
;// Declare your global variables here
;void main(void)
; 0000 0062 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0063     unsigned int timer_value=0;
; 0000 0064     //Port A speaking
; 0000 0065     PORTA=0x00;
;	timer_value -> R16,R17
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0066     DDRA=0xff;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0067     // Port D sensor
; 0000 0068     PORTD=0xff;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0069     DDRD=0xf0;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 006A     // PORTB Declare LCD
; 0000 006B     PORTB=0x00;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 006C     DDRB=0x00;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 006D     //portc-analog-IR
; 0000 006E     PORTC=0x00;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 006F     DDRC=0xff;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0070     //system init
; 0000 0071     System_init();
;PCODE: $00000020 VOL: 0
; 0000 0072     //LCD init
; 0000 0073     LCD_Init();
;PCODE: $00000021 VOL: 0
; 0000 0074     //usart_init
; 0000 0075     USART_init() ;
;PCODE: $00000022 VOL: 0
; 0000 0076     //UART_Printf(" \nnguyen hong phuc");
; 0000 0077     LCD_Printf("DISTANCE: (cm)");
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0078 
; 0000 0079  while (1)
;PCODE: $00000027 VOL: 0
; 0000 007A       {
; 0000 007B         TCNT1 = 0;  //reset timer
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 007C         TRIGGER=1;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 007D         delay_ms(10);     // tao 1 xung tren chan Trig toi thieu 10us
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 007E         TRIGGER=0;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 007F         UART_putChar(1);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0080         while(!ECHO_SRF05);          //doi chan echo duoc keo len cao
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0081         UART_putChar(2);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0082         TCCR1B=0x02;                      // khoi dong timer scale /8
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0083         while(ECHO_SRF05)                 // while echo pin is still high
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0084         {
; 0000 0085          if(timer_value>34560)
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0086             {
; 0000 0087             LCD_Printf("ECHO_ERROR");
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0088             delay_ms(2);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0089 
; 0000 008A             }
; 0000 008B         }
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 008C         TCCR1B =0x00;      // stop timer
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 008D         timer_value=TCNT1;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 008E         UART_putChar(3);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 008F 
; 0000 0090             //THU TRUYEN DISTANCE
; 0000 0091            timer1_value = (float)timer_value/1.382400; // [do rong xung]=[so dao dong]*12*[chu ki thach anh]
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0092            distance[i] = timer1_value/58;  // van toc song sieu am: v = 343.2m/s = 0.03432cm/us
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0093 
; 0000 0094            for(i=0;i<30;i++)
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0095            {
; 0000 0096            sum_1+=distance[i];
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0097            }
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0098            distance_1=sum_1/30;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0099            //TRUYEN LEN LCD
; 0000 009A             LCD_GotoXY(8,1);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 009B             LCD_Write_Int(distance_1);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 009C            // USART_ULTRASOUND
; 0000 009D             USART_1();
;PCODE: $00000089 VOL: 0
; 0000 009E             while (timer_value>34560&&timer_value<=14)       //note de nho
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 009F                  {
; 0000 00A0                      Byte_flag=1;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 1
; 0000 00A1                  }
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00A2        // IR_ULTRASOUND
; 0000 00A3       if(Byte_flag==1)
;PCODE: $00000099 VOL: 1
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00A4             {
; 0000 00A5                  delay_ms(10);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00A6                  ADC[i]=(float)ADC_read(0);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00A7                  delay_ms(100);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00A8             }
; 0000 00A9         Byte_flag=0;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 1
; 0000 00AA         for(i=0;i<30;i++)
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00AB         {
; 0000 00AC         sum_2+=ADC[i];
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00AD         LCD_Write_Cmd(CLR_SCR);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00AE         }
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00AF         value=sum_2/30;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00B0         volts= (long int)(value*5)/1024 ; //ADC 10 bits
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00B1         distance_2= 65*(pow(volts,-1.1))  ;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00B2         // USART_ULTRASOUND
; 0000 00B3             USART_2();
;PCODE: $000000DF VOL: 0
; 0000 00B4        //TRUYEN LEN LCD
; 0000 00B5            LCD_GotoXY(8,1);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00B6            LCD_Write_Int(distance_2);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00B7 
; 0000 00B8  }
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00B9  }
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0

	.DSEG
_0x3:
	.BYTE 0x1A
;
;// READ ADC VALUE
;unsigned int ADC_read(unsigned char ADC_CHANNEL)
; 0000 00BD {

	.CSEG
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00BE //  chon dien ap tham chieu va kenh can doc
; 0000 00BF ADMUX= ADC_VREF_TYPE|ADC_CHANNEL;
;	ADC_CHANNEL -> Y+0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00C0 delay_us(10);
;PCODE: $000000F2 VOL: 0
; 0000 00C1 // Start conversation
; 0000 00C2 ADCSRA|=0x40;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00C3 // wait for conversation end  (ADIF bit=1)
; 0000 00C4 while ((ADCSRA&0x10)==0);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00C5 //   ADC  WORD = ADCH+ADCL
; 0000 00C6 ADCSRA|=0x10;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00C7 return ADCW ;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00C8 }
;PCODE: $00000100 VOL: 0
;
;
;void USART_init(void)
; 0000 00CC {
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00CD // USART initialization
; 0000 00CE // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00CF // USART Receiver: On
; 0000 00D0 // USART Transmitter: On
; 0000 00D1 // USART Mode: Asynchronous
; 0000 00D2 // USART Baud Rate: 9600
; 0000 00D3 UCSRA=0x00;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00D4 UCSRB=0x18;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00D5 UCSRC=0x06;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00D6 UBRRH=0x00;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00D7 UBRRL=0x47;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00D8 }
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;
;
;
;#pragma used+
;void UART_putChar(char c)
; 0000 00DE {
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00DF     while ((UCSRA & DATA_REGISTER_EMPTY)==0);
;	c -> Y+0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00E0     UDR=c;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00E1 }
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;
;#pragma used-
;
;void UART_Printf(char *s)       //DE TEST CHUONG TRINH
; 0000 00E6 {
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00E7     // loop through entire string
; 0000 00E8     while (*s)
;	*s -> Y+0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00E9     {
; 0000 00EA         UART_putChar(*s);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00EB         delay_ms(20);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00EC         s++;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00ED     }
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00EE }
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;
;
;void LCD_Putc(char c)
; 0000 00F2 {
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00F3    switch (c)
;	c -> Y+0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00F4 
; 0000 00F5         //without "break" can't continue next step
; 0000 00F6    {
; 0000 00F7       case '\f'   :  LCD_Write_Cmd(CLR_SCR);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00F8                      delay_us(2);
;PCODE: $0000013B VOL: 0
; 0000 00F9                      break;
;PCODE: $0000013C VOL: 0
; 0000 00FA 
; 0000 00FB       // xuong dong
; 0000 00FC       case '\n'   :  LCD_Write_Cmd(CURSOR_LINE2);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00FD                      break;
;PCODE: $00000143 VOL: 0
; 0000 00FE 
; 0000 00FF       // dich con tro
; 0000 0100       case '\b'   :  LCD_Write_Cmd(0x10);
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0101                      break;
;PCODE: $0000014A VOL: 0
; 0000 0102 
; 0000 0103       default     :  LCD_Write_Data(c);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0104                      break;
;PCODE: $0000014F VOL: 0
; 0000 0105    }
;PCODE: $00000150 VOL: 0
; 0000 0106 }
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;
;void LCD_Printf(char *str)
; 0000 0109 {
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 010A     int i=0;
; 0000 010B     while(str[i]!='\0')      // loop will go on till the NULL character in the string
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;	*str -> Y+2
;	i -> R16,R17
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 010C     {
; 0000 010D         delay_us(50);
;PCODE: $00000161 VOL: 0
; 0000 010E         LCD_Putc(str[i]);    // sending data on LCD byte by byte
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 010F         i++;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0110     }
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 0111 }
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;
;void LCD_Write_Int(unsigned int integer )
; 0000 0114 {
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0115     unsigned char thousands,hundreds,tens,ones;
; 0000 0116 
; 0000 0117     thousands = integer / 1000;
;PCODE: $00000175 VOL: 0
;	integer -> Y+4
;	thousands -> R17
;	hundreds -> R16
;	tens -> R19
;	ones -> R18
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0118     LCD_Write_Data(thousands + 0x30);
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0119 
; 0000 011A     hundreds = ((integer - thousands*1000)) / 100;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 011B     LCD_Write_Data(hundreds + 0x30);
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 011C 
; 0000 011D     tens=(integer%100)/10;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 011E     LCD_Write_Data(tens + 0x30);
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 011F 
; 0000 0120     ones=integer%10;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 0121     LCD_Write_Data(ones + 0x30);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 0122 }
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;
;void LCD_Write_Nibble(char byte)
; 0000 0125 {
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0126        LCD_E = 1;
;	byte -> Y+0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0127     LCD_data_out(byte);
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0128     LCD_E = 0;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 0129 }
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;// wait + read LCD
;void LCD_Wait_Busy()
; 0000 012C {
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 012D     unsigned char tempH,tempL;
; 0000 012E     PORTB |= 0xF0;          // SET 4 BIT DATA (thap) duoc su dung
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;	tempH -> R17
;	tempL -> R16
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 012F     LCD_RS = 0;             // 0 = Instruction input, 1 = Data input
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0130     LCD_RW = 1;             // 0 = Write to LCD module,1 = Read from LCD module
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 0131 
; 0000 0132     do
;PCODE: $000001BE VOL: 0
; 0000 0133     {   // che do 4 bit se truyen va nhan nibble cao truoc (thap sau)
; 0000 0134         LCD_E = 1;          //che do 4 bit phai doc 2 lan
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 0135         delay_us(2);
;PCODE: $000001C1 VOL: 0
; 0000 0136         DDRB  = 0x0f;        //set 4 bit cao cua PORTD LAM input     (doc ve)
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 0137         tempH = PINB;       //read in upper nybble
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0138         DDRB  = 0xff;       //out put (xuat ra LCD)
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 0139         LCD_E = 0;          //busy_flag
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 013A         delay_us(2);
;PCODE: $000001CA VOL: 0
; 0000 013B        // ==============================
; 0000 013C        //không có phan nay khong hien LCD
; 0000 013D         LCD_E = 1;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 013E         delay_us(2);
;PCODE: $000001CD VOL: 0
; 0000 013F         DDRB  = 0x0f;
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 0140         tempL = PINB;       //read in lower nybble.
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 0141         DDRB  = 0xff;
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 0142         LCD_E = 0;          //BF = 1 is busy
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 0143         delay_us(2);
;PCODE: $000001D6 VOL: 0
; 0000 0144     } while (tempH&0x80);   //bit cuoi la busy
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0145 }
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;
;void LCD_Write_Cmd(char cmd)
; 0000 0148 {
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 0149     LCD_Wait_Busy();
;	cmd -> Y+0
;PCODE: $000001E2 VOL: 0
; 0000 014A     LCD_RS = 0;               // 0 = Instruction input
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 014B     LCD_RW = 0;               // 0 = Write to LCD module
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 014C     LCD_Write_Nibble(cmd>>4);  // send high byte first
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 014D     LCD_Write_Nibble(cmd);
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 014E }
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;
;void LCD_Write_Data(char chr)
; 0000 0151 {
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 0152     LCD_Wait_Busy();
;	chr -> Y+0
;PCODE: $000001F4 VOL: 0
; 0000 0153     LCD_RS = 1;                    // 1 = Data input
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 0154     LCD_RW = 0;                    // 0 = Write to LCD module
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0155     LCD_Write_Nibble(chr>>4);     // nibble cao truoc
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 0156     LCD_Write_Nibble(chr);
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0157 }
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;
;void LCD_Init()
; 0000 015A {
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 015B     LCD_RS = 0;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 015C     LCD_RW = 0;
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 015D     LCD_Write_Nibble(MODE_4_BIT>>4);   //lan dau tien truyen du lieu, LCD mac dinh la` 8 bit
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 015E     LCD_Write_Cmd(MODE_4_BIT);         //nen phai set function 2 lan de dieu chinh theo che do
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 015F     LCD_Write_Cmd(DISP_ON);            //mong muon: 4 bit, 2 line, 5x7 dot
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0160     //LCD_Write_Cmd(CURSOR_ON);        // tat con
; 0000 0161     LCD_Write_Cmd(CLR_SCR);
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0162 }
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;
;
;void LCD_GotoXY(unsigned char x, unsigned char y)
; 0000 0166 {
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 0167     if(x<40)
;	x -> Y+1
;	y -> Y+0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 0168 
; 0000 0169     {
; 0000 016A     //Sets the specified value (AAAAAA) into the address counter
; 0000 016B       if(y) x |= 0x40;    //0x40:  64D
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 016C       // di chuyen toi vi tri mong muon neu y=0 (DDRAM)
; 0000 016D       x |=0x80;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 016E       LCD_Write_Cmd(x);
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 016F     }
; 0000 0170 }
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;
;void USART_1(void)
; 0000 0173 {
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 0174             //USART TRANMISTER
; 0000 0175             USART_packet[0]=0x55;
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0176             USART_packet[1]=0xaa;
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0177             High_byte=(distance_1&0xff00)>>8;
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 0178             Low_byte=(distance_1&0x00ff);
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 0179             USART_packet[2]=High_byte;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 017A             USART_packet[3]=Low_byte;
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 017B 
; 0000 017C             for (i=0;i<4;i++)
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 017D             {
; 0000 017E             UART_putChar(USART_packet[i]);
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 017F             }
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0180 }
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;void USART_2(void)
; 0000 0182 {
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 0183    //USART TRANMISTER
; 0000 0184             USART_packet[0]=0x55;
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 0185             USART_packet[1]=0xaa;
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 0186             High_byte=(distance_2&0xff00)>>8;
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 0187             Low_byte=(distance_2&0x00ff);
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 0188             USART_packet[2]=High_byte;
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 0189             USART_packet[3]=Low_byte;
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 018A 
; 0000 018B             for (i=0;i<4;i++)
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 018C             {
; 0000 018D             UART_putChar(USART_packet[i]);
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 018E             }
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 018F }
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;
;void System_init(void)
; 0000 0192 {
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 0193     // Timer/Counter 1 initialization
; 0000 0194     // Clock source: System Clock
; 0000 0195     // Clock value: 1382.400 kHz
; 0000 0196     // Mode: Normal top=0xFFFF
; 0000 0197     // OC1A output: Discon.
; 0000 0198     // OC1B output: Discon.
; 0000 0199     // Noise Canceler: Off
; 0000 019A     // Input Capture on Falling Edge
; 0000 019B     // Timer1 Overflow Interrupt: Off
; 0000 019C     // Input Capture Interrupt: Off
; 0000 019D     // Compare A Match Interrupt: Off
; 0000 019E     // Compare B Match Interrupt: Off
; 0000 019F     TCCR1A=0x00;
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 01A0     TCCR1B=0x00;//0x02;
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 01A1     TCNT1=0x00;
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 01A2     ICR1H=0x00;
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 01A3     ICR1L=0x00;
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 01A4     OCR1AH=0x00;
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 01A5     OCR1AL=0x00;
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 01A6     OCR1BH=0x00;
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 01A7     OCR1BL=0x00;
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 01A8     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 01A9     TIMSK=0x00;
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 01AA     // Analog Comparator initialization
; 0000 01AB     // Analog Comparator: Off
; 0000 01AC     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 01AD     ACSR=0x80;
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 01AE     SFIOR=0x00;
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 01AF }
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;
;//void Speak(void)
;//{
;////SPEAKING
;//           if(distance==10)
;//           {
;//                for(index=0;index<4;index++)
;//                    {
;//                        //SPEAKING
;//                        PORTA;
;//
;//                    }
;//           }
;//        else if(distance==20)
;//        {
;//                for(index=0;index<4;index++)
;//                      {
;//                       //SPEAKING
;//                        PORTA;
;//
;//        }
;//       else if (distance==50)
;//       {
;//            for(index=0;index<4;index++)
;//               {
;//               //SPEAKING
;//                 PORTA ;
;//               }
;//
;//
;//      }
;//}
;//}
;
;
;
;
;
;
